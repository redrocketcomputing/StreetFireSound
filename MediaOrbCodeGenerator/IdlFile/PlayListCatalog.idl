module PlayListCatalog
{
	typedef unsigned short ErrorCode;
	const ErrorCode SUCCESS              = 0x0000;
	const ErrorCode UNKNOWN_MESSAGE      = 0x0001;
	const ErrorCode ACCESS_VIOLATION     = 0x0002;
	const ErrorCode UNIDENTIFIED_FAILURE = 0x0003;
	const ErrorCode NOT_IMPLEMENTED      = 0x0004;
	const ErrorCode RESERVED             = 0x0005;
	const ErrorCode INVALID_PARAMETER    = 0x0006;
	const ErrorCode RESOURCE_LIMIT       = 0x0007;
	const ErrorCode PARAMETER_SIZE_LIMIT = 0x0008;
	const ErrorCode INCOMPLETE_MESSAGE   = 0x0009;
	const ErrorCode INCOMPLETE_RESULT    = 0x000a;
	const ErrorCode LOCAL                = 0x000b;
	const ErrorCode STANDBY              = 0x000c;
	const ErrorCode IO_FAILURE           = 0x0080;
	const ErrorCode BAD_MLID             = 0x0081;

	enum OperationId
	{
		GET_META_DATA,
		CREATE_PLAYLIST,
		REMOVE_PLAYLIST,
		GET_PLAYLIST,
		UPDATE_PLAYLIST,
		GET_IRCODE_MAP
	};
	
	struct PlayList
	{
		octet ircode;
		wstring title;
		wstring artist;
		wstring genre;
		TimeCode playbackTime;
		DateTime initialTimeStamp;
		DateTime lastUpdateTimeStamp;
		sequence<MLID> content;
	};
	
	struct PlayListMetaData
	{
		octet ircode;
		wstring title;
		wstring artist;
		wstring genre;
		TimeCode playbackTime;
		DateTime initialTimeStamp;
		DateTime lastUpdateTimeStamp;
		MLID mediaLocationId;
	};
	
	interface PlayListCatalog
	{
		sequence<PlayListMetaData> getMetaData(in MLID mediaLocationId);
		MLID createPlayList(in PlayList playList);
		void removePlayList(in MLID mediaLocationId);
		PlayList getPlayList(in MLID mediaLocationId);
		void updatePlayList(in MLID mediaLocationId, in PlayList playList);
		sequence<MLID> getIrCodeMap();
	};

	interface VendorEvent
	{
		void playListCatalogChanged(in MLID hint);
	};
};