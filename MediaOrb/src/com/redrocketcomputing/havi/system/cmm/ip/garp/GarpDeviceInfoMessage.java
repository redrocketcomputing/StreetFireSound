/*
 * Copyright (C) 2004 by StreetFire Sound Labs
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 * $Id: GarpDeviceInfoMessage.java,v 1.1 2005/02/22 03:44:26 stephen Exp $
 */

package com.redrocketcomputing.havi.system.cmm.ip.garp;

import java.io.IOException;

import org.havi.system.types.GUID;
import org.havi.system.types.HaviByteArrayInputStream;
import org.havi.system.types.HaviByteArrayOutputStream;
import org.havi.system.types.HaviMarshallingException;
import org.havi.system.types.HaviUnmarshallingException;

/**
 * New device GARP message. Generated by a new device joining the network or a existing device is updating it status
 *
 * @author stephen Jul 23, 2003
 * @version 1.0
 *
 */
class GarpDeviceInfoMessage extends GarpMessage
{
  public final static int MARSHAL_TYPE = 1;
  
  private GUID guid = null;
  private byte[] address = null;
  private int port = -1;
  private int version;
  private byte[] reserved = new byte[0];

  /**
   * Constructor for GarpDeviceInfoMessage.
   */
  public GarpDeviceInfoMessage()
  {
    super();
  }

  /**
   * Constructor for GarpDeviceInfoMessage.
   * @param guid The new device's guid
   * @param address The new device's IP address
   * @param port The new devices base port offset
   */
  public GarpDeviceInfoMessage(GUID guid, byte[] address, int port)
  {
    // Save the parameters
    this.guid = guid;
    this.address = address;
    this.port = port;
  }

  /**
   * Constructor for GarpDeviceInfoMessage.
   * @param hbais The input stream to construct the message
   * @throws HaviUnmarshallingException Thrown with a bad message format is detected
   */
  public GarpDeviceInfoMessage(HaviByteArrayInputStream hbais) throws HaviUnmarshallingException
  {
    // Forward to unmarshall
    unmarshal(hbais);
  }

  /**
   * @see java.lang.Object#clone()
   */
  protected Object clone() throws CloneNotSupportedException
  {
    throw new CloneNotSupportedException();
  }

  /**
   * @see java.lang.Object#equals(Object)
   */
  public boolean equals(Object o)
  {
    // Check type
    if (o instanceof GarpDeviceInfoMessage)
    {
      // Cast to correct type
      GarpDeviceInfoMessage message = (GarpDeviceInfoMessage)o;

      // Compare address bytes
      for (int i = 0; i < address.length; i++)
      {
        // Check byte
        if (message.address[i] != address[i])
        {
          return false;
        }
      }

      // Compare info fields
      return message.guid.equals(guid) && message.address == address && message.port == port;
    }

    // Wrong type
    return false;
  }

  /**
   * @see java.lang.Object#hashCode()
   */
  public int hashCode()
  {
    return guid.hashCode() + address[0] << 24 + address[1] << 16 + address[2] << 8 + address[4] + port +  543991;
  }

  /**
   * @see org.havi.system.types.Marshallable#marshal(HaviByteArrayOutputStream)
   */
  public void marshal(HaviByteArrayOutputStream hbaos) throws HaviMarshallingException
  {
    try
    {
      // Super class
      super.marshal(hbaos);

      // Marshal guid
      guid.marshal(hbaos);

      // Marshall address
      hbaos.write(address);

      // Marshall the port
      hbaos.writeInt(port);
      
      // Write version
      hbaos.writeInt(version);
      
      // Write reserved
      hbaos.writeInt(reserved.length);
      hbaos.write(reserved);
    }
    catch (IOException e)
    {
      throw new HaviMarshallingException();
    }
  }

  /**
   * @see org.havi.system.types.Marshallable#unmarshal(HaviByteArrayInputStream)
   */
  public void unmarshal(HaviByteArrayInputStream hbais) throws HaviUnmarshallingException
  {
    try
    {
      // Super class
      super.unmarshal(hbais);

      // Unmarshal guid
      guid = new GUID(hbais);

      // Unmarshall the address
      address = new byte[4];
      hbais.read(address, 0, 4);

      // Unmarshall the port
      port = hbais.readInt();
      
      // Unmarshal version
      version = hbais.readInt();
      
      // Unmarshal reserved
      int size = hbais.readInt();
      reserved = new byte[size];
      hbais.read(reserved);
    }
    catch (IOException e)
    {
      throw new HaviUnmarshallingException();
    }
  }

  /**
   * @see com.redrocketcomputing.havi.system.cmm.ip.garp.GarpMessage#dispatch(GarpMessageHandler)
   */
  public void dispatch(GarpMessageHandler handler)
  {
    // Foward
    handler.handleDeviceInfo(guid, address, port);
  }


  /**
   * @see java.lang.Object#toString()
   */
  public String toString()
  {
    return "GarpDeviceInfoMessage: " + guid.toString() + " address: " + address[0] + '.' + address[1] + '.' + address[2] + '.' + address[3] + " port; " + port;
  }

  /**
   * @return Returns the address.
   */
  public final byte[] getAddress()
  {
    return address;
  }
  
  /**
   * @param address The address to set.
   */
  public final void setAddress(byte[] address)
  {
    this.address = address;
  }

  /**
   * @return Returns the guid.
   */
  public final GUID getGuid()
  {
    return guid;
  }

  /**
   * @param guid The guid to set.
   */
  public final void setGuid(GUID guid)
  {
    this.guid = guid;
  }

  /**
   * @return Returns the port.
   */
  public final int getPort()
  {
    return port;
  }

  /**
   * @param port The port to set.
   */
  public final void setPort(int port)
  {
    this.port = port;
  }

  /**
   * @return Returns the version.
   */
  public final int getVersion()
  {
    return version;
  }

  /**
   * @param version The version to set.
   */
  public final void setVersion(int version)
  {
    this.version = version;
  }
}
